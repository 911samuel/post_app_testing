import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:post_app_testing/core/ui/post_card.dart';
import 'package:post_app_testing/ui/post/view/post_screen.dart';
import 'package:provider/provider.dart';

import 'package:post_app_testing/core/theme.dart';
import 'package:post_app_testing/domain/model/post.dart';
import 'package:post_app_testing/data/repositories/post_repository.dart';
import 'package:post_app_testing/ui/post/view_model/posts_view_modal.dart';

import 'post_screen_test.mocks.dart'; // generated by mockito

@GenerateMocks([PostRepository])
void main() {
  late MockPostRepository mockRepository;

  setUp(() {
    mockRepository = MockPostRepository();
  });

  //Helper function
  Widget createWidgetUnderTest({required Widget child}) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeNotifier()),
        Provider<PostRepository>.value(value: mockRepository),
        ChangeNotifierProvider(create: (_) => PostsViewModal(mockRepository)),
      ],
      child: MaterialApp(home: child),
    );
  }

  testWidgets('Displays posts on success', (WidgetTester tester) async {
    // Arrange
    final mockPost = Post(
      title: 'Test Post',
      description: 'This is a description.',
      image: 'https://example.com/image.jpg',
      date: '2025-06-27',
    );

    when(mockRepository.fetchPosts()).thenAnswer((_) async {
      await Future.delayed(const Duration(milliseconds: 100));
      return [mockPost];
    });

    await tester.pumpWidget(createWidgetUnderTest(child: const PostsScreen()));

    // First frame triggers loading
    await tester.pump();
    expect(find.byType(CircularProgressIndicator), findsOneWidget);

    // Wait for loading to finish
    await tester.pumpAndSettle();

    // Verify post is shown
    expect(find.text('Test Post'), findsOneWidget);
    expect(find.text('This is a description.'), findsOneWidget);
    expect(find.text('2025-06-27'), findsOneWidget);
    expect(find.byType(ListView), findsOneWidget);
    expect(find.byType(PostCard), findsOneWidget);
  });

  testWidgets('Displays error when fetch fails', (WidgetTester tester) async {
    // Arrange
    when(mockRepository.fetchPosts()).thenAnswer((_) async {
      await Future.delayed(Duration(milliseconds: 100));
      throw Exception('Failed to fetch');
    });


    await tester.pumpWidget(createWidgetUnderTest(child: const PostsScreen()));

    // First frame triggers loading
    await tester.pump();
    expect(find.byType(CircularProgressIndicator), findsOneWidget);

    // Wait for error to be shown
    await tester.pumpAndSettle();

    expect(find.textContaining('Failed to load posts'), findsOneWidget);
  });
}
